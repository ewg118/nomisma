<?xml version="1.0" encoding="utf-8"?>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:xforms="http://www.w3.org/2002/xforms" xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xmlns:ev="http://www.w3.org/2001/xml-events" xmlns:xxforms="http://orbeon.org/oxf/xml/xforms" xmlns:xi="http://www.w3.org/2001/XInclude"
	xmlns:fr="http://orbeon.org/oxf/xml/form-runner" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:void="http://rdfs.org/ns/void#"
	xmlns:dcterms="http://purl.org/dc/terms/" xmlns:crm="http://www.cidoc-crm.org/cidoc-crm/" xmlns:nmo="http://nomisma.org/ontology#"
	xmlns:foaf="http://xmlns.com/foaf/0.1/" xmlns:res="http://www.w3.org/2005/sparql-results#" xmlns:edm="http://www.europeana.eu/schemas/edm/"
	xmlns:svcs="http://rdfs.org/sioc/services#" xmlns:doap="http://usefulinc.com/ns/doap#">
	<head>
		<title>nomisma.org: manage datasets</title>
		<link rel="stylesheet" href="/fr/style/bootstrap/css/bootstrap.css" type="text/css" />
		<link rel="stylesheet" href="/fr/style/form-runner-bootstrap-override.css" type="text/css" />
		<link rel="shortcut icon" href="/ops/images/orbeon-icon-16.ico" />
		<link rel="icon" href="/ops/images/orbeon-icon-16.png" type="image/png" />
		<link rel="stylesheet" href="http://netdna.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css" />
		<script type="text/javascript" src="http://netdna.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js"></script>
		<link rel="stylesheet" href="/apps/nomisma/xforms/css/style.css" />

		<xforms:model>
			<!-- ***** RDF templates ***** -->
			<xforms:instance id="rdf" xxforms:exclude-result-prefixes="#default xhtml xforms xs ev xxforms fr res xi nomisma">
				<rdf:RDF xmlns="" xmlns:dcterms="http://purl.org/dc/terms/" xmlns:nm="http://nomisma.org/id/" xmlns:nmo="http://nomisma.org/ontology#"
					xmlns:foaf="http://xmlns.com/foaf/0.1/" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
					xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#" xmlns:skos="http://www.w3.org/2004/02/skos/core#"
					xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#" xmlns:xsd="http://www.w3.org/2001/XMLSchema#"
					xmlns:un="http://www.owl-ontologies.com/Ontology1181490123.owl#" xmlns:edm="http://www.europeana.eu/schemas/edm/"
					xmlns:svcs="http://rdfs.org/sioc/services#" xmlns:doap="http://usefulinc.com/ns/doap#"/>
			</xforms:instance>

			<xforms:instance id="void-rdf" xxforms:exclude-result-prefixes="#default xhtml xforms xs ev xxforms fr res xi nomisma">
				<rdf:RDF xmlns="" xmlns:dcterms="http://purl.org/dc/terms/" xmlns:nm="http://nomisma.org/id/" xmlns:nmo="http://nomisma.org/ontology#"
					xmlns:foaf="http://xmlns.com/foaf/0.1/" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
					xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#" xmlns:skos="http://www.w3.org/2004/02/skos/core#"
					xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#" xmlns:xsd="http://www.w3.org/2001/XMLSchema#"
					xmlns:un="http://www.owl-ontologies.com/Ontology1181490123.owl#" xmlns:edm="http://www.europeana.eu/schemas/edm/"
					xmlns:svcs="http://rdfs.org/sioc/services#" xmlns:doap="http://usefulinc.com/ns/doap#">
					<void:Dataset rdf:about="http://numismatics.org/search/">
						<dcterms:title xml:lang="en"/>
						<dcterms:description xml:lang="en"/>
						<dcterms:publisher rdf:resource=""/>
						<dcterms:license rdf:resource=""/>
						<void:dataDump rdf:resource="http://numismatics.org/collection/1944.100.76933.jsonld?profile=linkedart"/>
					</void:Dataset>
				</rdf:RDF>
			</xforms:instance>

			<!-- RDF templates for harvesting -->
			<xforms:instance id="object" xxforms:exclude-result-prefixes="#all">
				<nmo:NumismaticObject xmlns="" rdf:about="" xmlns:dcterms="http://purl.org/dc/terms/" xmlns:nmo="http://nomisma.org/ontology#"
					xmlns:foaf="http://xmlns.com/foaf/0.1/" xmlns:edm="http://www.europeana.eu/schemas/edm/" xmlns:svcs="http://rdfs.org/sioc/services#"
					xmlns:doap="http://usefulinc.com/ns/doap#"> </nmo:NumismaticObject>
			</xforms:instance>

			<xforms:instance id="webresource-template" xxforms:exclude-result-prefixes="#all">
				<edm:WebResource rdf:about="">
					<svcs:has_service rdf:resource=""/>
					<dcterms:isReferencedBy rdf:resource=""/>
				</edm:WebResource>
			</xforms:instance>

			<xforms:instance id="service-template" xxforms:exclude-result-prefixes="#all">
				<svcs:Service rdf:about="">
					<dcterms:conformsTo rdf:resource="http://iiif.io/api/image"/>
					<doap:implements rdf:resource="http://iiif.io/api/image/2/level1.json"/>
				</svcs:Service>
			</xforms:instance>

			<!-- Concordance URIs -->
			<xforms:instance id="mappings" xxforms:exclude-result-prefixes="#all">
				<mappings xmlns=""></mappings>
			</xforms:instance>

			<!-- Linked Art JSON-LD instance -->
			<xforms:instance id="json" xxforms:exclude-result-prefixes="#all">
				<json></json>
			</xforms:instance>

			<!-- config and controls -->
			<xforms:instance id="config" xxforms:exclude-result-prefixes="#all">
				<xi:include href="../config.xml"/>
			</xforms:instance>

			<xforms:instance id="control-instance">
				<controls xmlns="">
					<status></status>
					<void_uri></void_uri>
					<dump_uri></dump_uri>
					<dataset></dataset>
					<license></license>
					<validate-trigger>false</validate-trigger>
					<import-json-trigger>false</import-json-trigger>
					<new_findspot_uri></new_findspot_uri>
					<concept_type></concept_type>
				</controls>
			</xforms:instance>

			<xforms:instance id="languages">
				<xi:include href="instances/languages.xml"/>
			</xforms:instance>

			<xforms:instance id="rights">
				<xi:include href="instances/rights.xml"/>
			</xforms:instance>

			<xforms:instance id="licenses">
				<xi:include href="instances/licenses.xml"/>
			</xforms:instance>

			<!-- store the void:Datasets in their own instance to free up the SPARQL response for other data harvesting and validation -->
			<xforms:instance id="datasets">
				<rdf:RDF/>
			</xforms:instance>

			<xforms:instance id="collections" xxforms:exclude-result-prefixes="#all">
				<collections xmlns=""></collections>
			</xforms:instance>

			<!-- SPARQL instances -->
			<xforms:instance id="sparqlQuery">
				<query></query>
			</xforms:instance>

			<!-- preloaded instances -->
			<xforms:instance id="sparqlResponse">
				<sparql xmlns="http://www.w3.org/2005/sparql-results#"/>
			</xforms:instance>

			<!-- sparql update -->
			<xforms:instance id="sparqlUpdate-template">
				<templates xmlns="">
					<query id="delete-metadata"><![CDATA[PREFIX void:	<http://rdfs.org/ns/void#> 
DELETE {?s ?p ?o} WHERE { <DATASET> ?p ?o . ?s ?p ?o . FILTER (?s = <DATASET>)}]]></query>
					<query id="delete-dump"><![CDATA[PREFIX nmo:	<http://nomisma.org/ontology#>
PREFIX void:	<http://rdfs.org/ns/void#>
PREFIX dcterms:	<http://purl.org/dc/terms/>
PREFIX foaf:	<http://xmlns.com/foaf/0.1/>
PREFIX svcs:	<http://rdfs.org/sioc/services#>
DELETE {?s ?p ?o} WHERE {
  {
     SELECT ?object WHERE {?object void:inDataset <DATASET>}  
  }
{ ?object foaf:depiction ?image .
  ?image svcs:has_service ?s . ?s ?p ?o}
UNION { ?object foaf:depiction ?s . ?s ?p ?o}
UNION { ?object nmo:hasObverse/foaf:depiction ?image .
  ?image svcs:has_service ?s . ?s ?p ?o}
UNION { ?object nmo:hasObverse/foaf:depiction ?s . ?s ?p ?o}
UNION { ?object nmo:hasObverse ?s . ?s ?p ?o}
UNION { ?object nmo:hasReverse/foaf:depiction ?image .
  ?image svcs:has_service ?s . ?s ?p ?o}
UNION { ?object nmo:hasReverse/foaf:depiction ?s . ?s ?p ?o}
UNION { ?object nmo:hasReverse ?s . ?s ?p ?o}
UNION { ?object dcterms:tableOfContents ?s . ?s ?p ?o}
UNION { BIND (?object as ?s)
        ?s ?p ?o }
}]]></query>
					<!--<query id="delete-NumismaticObject"><![CDATA[PREFIX nmo:	<http://nomisma.org/ontology#>
PREFIX void:	<http://rdfs.org/ns/void#>
PREFIX dcterms:	<http://purl.org/dc/terms/>
PREFIX foaf:	<http://xmlns.com/foaf/0.1/>
PREFIX svcs:	<http://rdfs.org/sioc/services#>
DELETE {?s ?p ?o} WHERE {
  {
     SELECT ?object WHERE {?object void:inDataset <DATASET>}  
  }
{ ?object foaf:depiction ?image .
  ?image svcs:has_service ?s . ?s ?p ?o}
UNION { ?object foaf:depiction ?s . ?s ?p ?o}
UNION { ?object nmo:hasObverse/foaf:depiction ?image .
  ?image svcs:has_service ?s . ?s ?p ?o}
UNION { ?object nmo:hasObverse/foaf:depiction ?s . ?s ?p ?o}
UNION { ?object nmo:hasObverse ?s . ?s ?p ?o}
UNION { ?object nmo:hasReverse/foaf:depiction ?image .
  ?image svcs:has_service ?s . ?s ?p ?o}
UNION { ?object nmo:hasReverse/foaf:depiction ?s . ?s ?p ?o}
UNION { ?object nmo:hasReverse ?s . ?s ?p ?o}
UNION { BIND (?object as ?s)
        ?s ?p ?o }
}]]></query>-->
					<query id="delete-NumismaticObject"><![CDATA[PREFIX nmo:	<http://nomisma.org/ontology#>
PREFIX void:	<http://rdfs.org/ns/void#>
PREFIX dcterms:	<http://purl.org/dc/terms/>
PREFIX foaf:	<http://xmlns.com/foaf/0.1/>
PREFIX svcs:	<http://rdfs.org/sioc/services#>
DELETE {?s ?p ?o} WHERE {
{ ?object void:inDataset <DATASET> ;
  foaf:depiction ?image .
  ?image svcs:has_service ?s . ?s ?p ?o}
UNION { ?object void:inDataset <DATASET> ;
  foaf:depiction ?s . ?s ?p ?o}
UNION { ?object  void:inDataset <DATASET> ;
	nmo:hasObverse/foaf:depiction ?image .
  ?image svcs:has_service ?s . ?s ?p ?o}
UNION { ?object  void:inDataset <DATASET> ;
	nmo:hasObverse/foaf:depiction ?s . ?s ?p ?o}
UNION { ?object  void:inDataset <DATASET> ;
	nmo:hasObverse ?s . ?s ?p ?o}
UNION { ?object  void:inDataset <DATASET> ;
	nmo:hasReverse/foaf:depiction ?image .
  ?image svcs:has_service ?s . ?s ?p ?o}
UNION { ?object  void:inDataset <DATASET> ;
	nmo:hasReverse/foaf:depiction ?s . ?s ?p ?o}
UNION { ?object  void:inDataset <DATASET> ;
	nmo:hasReverse ?s . ?s ?p ?o}
UNION { ?s void:inDataset <DATASET> . ?s ?p ?o}
}]]></query>

					<query id="delete-TypeSeriesItem"><![CDATA[PREFIX nmo:	<http://nomisma.org/ontology#>
PREFIX void:	<http://rdfs.org/ns/void#>
PREFIX dcterms:	<http://purl.org/dc/terms/>
PREFIX foaf:	<http://xmlns.com/foaf/0.1/>
PREFIX svcs:	<http://rdfs.org/sioc/services#>
DELETE {?s ?p ?o} WHERE {
{ ?object void:inDataset <DATASET> ;
  nmo:hasObverse ?s . ?s ?p ?o }
UNION { ?object void:inDataset <DATASET> ;
  nmo:hasReverse ?s . ?s ?p ?o }
UNION { ?s void:inDataset <DATASET> . ?s ?p ?o}
}]]></query>
					<query id="delete-Hoard"><![CDATA[PREFIX nmo:	<http://nomisma.org/ontology#>
PREFIX void:	<http://rdfs.org/ns/void#>
PREFIX dcterms:	<http://purl.org/dc/terms/>
PREFIX foaf:	<http://xmlns.com/foaf/0.1/>
PREFIX svcs:	<http://rdfs.org/sioc/services#>
DELETE {?s ?p ?o} WHERE {
{ ?object void:inDataset <DATASET> ;
  dcterms:tableOfContents ?s . ?s ?p ?o }
UNION { ?s void:inDataset <DATASET> . ?s ?p ?o}
}]]></query>
					<query id="replace-findspot"><![CDATA[PREFIX nmo:	<http://nomisma.org/ontology#>
PREFIX dcterms:	<http://purl.org/dc/terms/>
PREFIX foaf:	<http://xmlns.com/foaf/0.1/>
PREFIX geo:	<http://www.w3.org/2003/01/geo/wgs84_pos#>
PREFIX xsd:	<http://www.w3.org/2001/XMLSchema#>
DELETE DATA { 
  <URI> nmo:hasFindspot <OLDFINDSPOT>
} ;
INSERT DATA {
  <URI> nmo:hasFindspot <NEWFINDSPOT> .
  <NEWFINDSPOT> geo:lat "LAT"^^xsd:decimal; 
  		geo:long "LONG"^^xsd:decimal;
  		foaf:name "NAME";
  		dcterms:isPartOf <OLDFINDSPOT>
}]]></query>
					<query id="revert-findspot"><![CDATA[PREFIX nmo:	<http://nomisma.org/ontology#>
PREFIX dcterms:	<http://purl.org/dc/terms/>
PREFIX foaf:	<http://xmlns.com/foaf/0.1/>
PREFIX geo:	<http://www.w3.org/2003/01/geo/wgs84_pos#>
PREFIX xsd:	<http://www.w3.org/2001/XMLSchema#>
DELETE DATA { 
  <URI> nmo:hasFindspot <OLDFINDSPOT>
} ;
INSERT DATA {
  <URI> nmo:hasFindspot <NEWFINDSPOT> 
}]]></query>
					<query id="insert-test-findspot"><![CDATA[PREFIX nmo:	<http://nomisma.org/ontology#>
PREFIX dcterms:	<http://purl.org/dc/terms/>
PREFIX foaf:	<http://xmlns.com/foaf/0.1/>
PREFIX geo:	<http://www.w3.org/2003/01/geo/wgs84_pos#>
PREFIX xsd:	<http://www.w3.org/2001/XMLSchema#>
INSERT DATA
{
  <URI> nmo:hasFindspot <FINDSPOT> .
  <FINDSPOT> geo:lat "LAT"^^xsd:decimal; 
  		geo:long "LONG"^^xsd:decimal;
  		foaf:name "NAME"
}]]></query>
				</templates>
			</xforms:instance>

			<xforms:instance id="sparqlUpdate">
				<query></query>
			</xforms:instance>

			<!-- sparql query templates -->
			<xforms:instance id="sparql-templates">
				<templates xmlns="">
					<query id="get-datasets"><![CDATA[PREFIX rdf:	<http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX dcterms:	<http://purl.org/dc/terms/>
PREFIX void:	<http://rdfs.org/ns/void#>
PREFIX skos:	<http://www.w3.org/2004/02/skos/core#>
CONSTRUCT {?uri rdf:type void:Dataset ; 
  dcterms:publisher ?publisher; 
  dcterms:title ?title ; 
  void:dataDump ?dump ;
  dcterms:type ?type }
WHERE {   
  ?uri a void:Dataset ; 
  	void:dataDump ?dump ; 
  	dcterms:publisher | dcterms:publisher/skos:prefLabel ?publisher FILTER (isLiteral(?publisher)) .
  ?uri dcterms:title ?title FILTER (lang(?title) = "" || langMatches(lang(?title), "en")).
  { SELECT DISTINCT ?uri ?type WHERE {
      ?coins void:inDataset ?uri ;
             rdf:type ?type
    } GROUP BY ?uri ?type
  }
} ORDER BY ASC(?publisher) ASC(?title)]]></query>
					<query id="get-findspot"><![CDATA[PREFIX nmo:	<http://nomisma.org/ontology#>
PREFIX geo:	<http://www.w3.org/2003/01/geo/wgs84_pos#>
SELECT ?findspot ?name ?lat ?long WHERE {
  <URI> nmo:hasFindspot ?findspot .
  ?findspot geo:lat ?lat;
            geo:long ?long ;
            foaf:name ?name
}]]></query>
					<query id="get-collections"><![CDATA[PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX nmo:	<http://nomisma.org/ontology#>
SELECT ?uri ?label WHERE {
  ?uri a nmo:Collection ;
       skos:prefLabel ?label FILTER (langMatches(lang(?label), "en"))
} ORDER BY ASC(?label)]]></query>
					<query id="get-match"><![CDATA[PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
SELECT ?uri ?type WHERE {
  ?uri skos:exactMatch <%MATCH%> ;
       rdf:type ?type FILTER (?type != skos:Concept)
}]]></query>
				</templates>
			</xforms:instance>

			<!-- test instance for updating private coordinates -->
			<xforms:instance id="private-coordinates" xxforms:exclude-result-prefixes="#all">
				<records xmlns="">
					<record uri="https://finds.org.uk/database/artefacts/record/id/624175">
						<lat>50.89</lat>
						<long>0.07</long>
					</record>
				</records>
			</xforms:instance>

			<!-- Solr instances -->
			<xforms:instance id="addIndex" xxforms:exclude-result-prefixes="#all">
				<add xmlns=""></add>
			</xforms:instance>

			<xforms:instance id="doc-template" xxforms:exclude-result-prefixes="#all">
				<doc xmlns="">
					<field name="uri"></field>
					<field name="geo" update="set"></field>
				</doc>
			</xforms:instance>

			<xforms:instance id="sendCommit" xxforms:exclude-result-prefixes="#all">
				<commit xmlns=""></commit>
			</xforms:instance>

			<!-- test -->
			<xforms:instance id="insert-test">
				<record xmlns="">
					<uri>https://finds.org.uk/database/artefacts/record/id/624175</uri>
					<findspot>http://data.ordnancesurvey.co.uk/doc/7000000000002687</findspot>
					<name>Ringmer</name>
					<lat>50.9005123971</lat>
					<long>0.0664567241337</long>
				</record>
			</xforms:instance>

			<!-- ************* BINDINGS **********************-->
			<xforms:bind nodeset="instance('void-rdf')">
				<xforms:bind nodeset="void:Dataset">
					<xforms:bind nodeset="@rdf:about" required="true()" type="xs:anyURI" constraint="matches(., 'https?://(-\.)?([^\s/?\.#-]+\.?)+(/[^\s]*)?$')"/>
					<xforms:bind nodeset="dcterms:title" required="true()">
						<xforms:bind nodeset="@xml:lang"
							constraint="string-length(.) &gt; 0 and (count(parent::node()/parent::node()/dcterms:title/@xml:lang) = count(distinct-values(parent::node()/parent::node()/dcterms:title/@xml:lang)))"
						/>
					</xforms:bind>
					<xforms:bind nodeset="dcterms:description" required="true()">
						<xforms:bind nodeset="@xml:lang"
							constraint="string-length(.) &gt; 0 and (count(parent::node()/parent::node()/dcterms:description/@xml:lang) = count(distinct-values(parent::node()/parent::node()/dcterms:description/@xml:lang)))"
						/>
					</xforms:bind>
					<xforms:bind nodeset="dcterms:license"
						constraint="if (not(@rdf:resource)) then string-length(normalize-space(.)) &gt; 0 else string-length(normalize-space(.)) = 0"/>
					<xforms:bind nodeset="dcterms:rights"
						constraint="if (not(@rdf:resource)) then string-length(normalize-space(.)) &gt; 0 else string-length(normalize-space(.)) = 0"/>
					<xforms:bind nodeset="//@rdf:resource" type="xs:anyURI" required="true()"
						constraint="matches(., 'https?://(-\.)?([^\s/?\.#-]+\.?)+(/[^\s]*)?$')"/>
				</xforms:bind>
			</xforms:bind>

			<xforms:bind nodeset="instance('control-instance')">
				<xforms:bind id="validate-trigger" nodeset="validate-trigger" type="xs:boolean" readonly=". != true()"/>
				<xforms:bind id="import-json-trigger" nodeset="import-json-trigger" type="xs:boolean" readonly=". != true()"/>
				<xforms:bind nodeset="license" required="true()">
					<xforms:bind nodeset="@other" required="true()"/>
				</xforms:bind>
				<xforms:bind nodeset="rights" required="true()">
					<xforms:bind nodeset="@other" required="true()"/>
				</xforms:bind>
			</xforms:bind>

			<!-- **************** DYNAMIC VALIDATION CONTROLS ********************** -->
			<xforms:action ev:event="xxforms-invalid" ev:observer="void-rdf">
				<xforms:setvalue ref="instance('control-instance')/import-json-trigger" value="false()"/>
			</xforms:action>

			<xforms:action ev:event="xxforms-valid" ev:observer="void-rdf">
				<xforms:setvalue ref="instance('control-instance')/import-json-trigger" value="true()"/>
			</xforms:action>

			<!-- ************* SPARQL SUBMISSIONS **********************-->
			<xforms:submission id="submit-sparqlQuery" action="{instance('config')/sparql_query}?query={encode-for-uri(instance('sparqlQuery'))}&amp;output=xml"
				ref="instance('sparqlResponse')" replace="instance" method="get">
				<xforms:message ev:event="xforms-submit-error" level="modal">SPARQL query failed.</xforms:message>
			</xforms:submission>

			<xforms:submission id="update-graph" action="{instance('config')/sparql_update}" ref="instance('sparqlUpdate')" serialization="text/plain"
				replace="none" method="post" mediatype="application/sparql-update">
				<xforms:setvalue ev:event="xforms-submit-done" ref="instance('control-instance')/status">Graph successfully deleted from
					endpoint.</xforms:setvalue>
				<xforms:message ev:event="xforms-submit-error" level="modal">SPARQL update failed.</xforms:message>
			</xforms:submission>

			<xforms:submission id="post-void" action="{instance('config')/sparql_store}?default" ref="instance('void-rdf')" replace="none" method="post"
				mediatype="application/rdf+xml">
				<xforms:setvalue ev:event="xforms-submit-done" ref="instance('control-instance')/status">Successfully posted to endpoint.</xforms:setvalue>
				<xforms:message ev:event="xforms-submit-error" level="modal">Unable to post VoID metadata.</xforms:message>
			</xforms:submission>

			<xforms:submission id="post-dump" action="{instance('config')/sparql_store}?default" ref="instance('rdf')" replace="none" method="post"
				mediatype="application/rdf+xml">
				<xforms:setvalue ev:event="xforms-submit-done" ref="instance('control-instance')/status">Successfully posted to endpoint.</xforms:setvalue>
				<xforms:message ev:event="xforms-submit-error" level="modal">Unable to post data dump.</xforms:message>
			</xforms:submission>

			<!-- ************************* SOLR SUBMISSIONS ************************** -->
			<xforms:submission id="post-solr-doc" action="{instance('config')/solr_fuseki}update" ref="instance('addIndex')" instance="addIndex" replace="none"
				method="post">
				<xforms:message ev:event="xforms-submit-error" level="modal">Data Failed to POST to Solr. Index may be offline or URL is
					incorrect.</xforms:message>
				<xforms:send submission="submit-commit" ev:event="xforms-submit-done"/>
			</xforms:submission>

			<xforms:submission id="submit-commit" action="{instance('config')/solr_fuseki}update" ref="instance('sendCommit')" instance="sendCommit"
				replace="none" method="post">
				<xforms:message level="modal" ev:event="xforms-submit-error">Failed to commit to Solr index.</xforms:message>
			</xforms:submission>

			<!-- ************************* LOAD RDF/XML ************************** -->
			<xforms:submission id="load-void" serialization="none" method="get" action="{instance('control-instance')/void_uri}" replace="instance"
				instance="void-rdf">
				<xforms:action ev:event="xforms-submit-error">
					<xforms:message level="modal">Unable to load VoID metadata RDF.</xforms:message>
				</xforms:action>
			</xforms:submission>

			<xforms:submission id="load-dump" serialization="none" method="get" action="{instance('control-instance')/dump_uri}" replace="instance"
				instance="rdf">
				<xforms:action ev:event="xforms-submit-error">
					<xforms:message level="modal">Unable to load VoID dump.</xforms:message>
				</xforms:action>
			</xforms:submission>

			<!-- ************************* LOAD LINKED ART JSON-LD ************************** -->
			<xforms:submission id="load-json" serialization="none" method="get" action="{instance('void-rdf')/void:Dataset/void:dataDump/@rdf:resource}"
				replace="instance" instance="json">
				<xforms:action ev:event="xforms-submit-error">
					<xforms:message level="modal">Unable to load JSON-LD. Either it is not JSON or the URL is incorrect.</xforms:message>
				</xforms:action>

				<!-- iterate through each JSON Human-Made-Object at the level of each API call -->
				<xforms:action ev:event="xforms-submit-done">
					<!-- iterate through all id elements in order to convert Getty curies into full URIs -->
					<xforms:action xxforms:iterate="instance('json')//id">
						<xforms:var name="val" select="normalize-space(data(context()))"/>
						<xforms:var name="uri"
							select="if (starts-with($val, 'aat:') or starts-with($val, 'ulan:') or starts-with($val, 'tgn:')) then concat('http://vocab.getty.edu/', substring-before($val, ':'), '/', substring-after($val, ':'))
							else if (starts-with($val, 'nm:')) then concat('http://nomisma.org/id/', substring-after($val, ':')) else $val"/>

						<xforms:setvalue ref="context()" value="$uri"/>
					</xforms:action>

					<!-- extract all possible URIs and execute SPARQL queries to get their Kerameikos.org exactMatch, if applicable -->
					<xforms:action xxforms:iterate="distinct-values(instance('json')//current_owner/id)">
						<xforms:var name="uri" select="normalize-space(data(context()))"/>

						<!-- perform lookup only if the URI hasn't already been mapped (applicable for eventual API pagination) -->
						<xforms:action if="not(instance('mappings')/mapping[@from = $uri]/@to)">
							<!-- set the SPARQL query-->
							<xforms:setvalue ref="instance('sparqlQuery')" value="replace(instance('sparql-templates')/query[@id='get-match'], '%MATCH%', $uri)"/>
							<xforms:send submission="submit-sparqlQuery"/>

							<!-- if there's a response, then insert the corresponding Kerameikos URI and class -->
							<xforms:action if="instance('sparqlResponse')//res:result">
								<xforms:insert context="instance('mappings')" nodeset="./child::node()[last()]"
									origin="xforms:element('mapping', (xforms:attribute('from', $uri), xforms:attribute('to', instance('sparqlResponse')//res:binding[@name='uri']/res:uri), xforms:attribute('type', instance('sparqlResponse')//res:binding[@name='type']/res:uri)))"
								/>
							</xforms:action>
							<!-- otherwise insert a mapping @from without a @to to prevent further HTTP requests -->
							<xforms:action if="not(instance('sparqlResponse')//res:result)">
								<xforms:insert context="instance('mappings')" nodeset="./child::node()[last()]"
									origin="xforms:element('mapping', (xforms:attribute('from', $uri)))"/>
							</xforms:action>
						</xforms:action>
					</xforms:action>

					<!-- interate through all HMOs in the JSON-LD response that are not sides of a coin -->
					<xforms:action xxforms:iterate="instance('json')/descendant-or-self::node()[type='HumanMadeObject' and not(ancestor::part)]">
						<!-- use the home page link when available, otherwise use the URI for the HMO -->
						<xforms:var name="objectURI"
							select="if (context()/subject_of/_[classified_as/_/id = 'http://vocab.getty.edu/aat/300266277'])
							then context()/subject_of/_[classified_as/_/id = 'http://vocab.getty.edu/aat/300266277']/id else context()/id"/>

						<xforms:setvalue ref="instance('object')/@rdf:about" value="$objectURI"/>

						<!-- Identifiers: Title and Accession number -->
						<xforms:action xxforms:iterate="context()/identified_by/_">
							<xforms:var name="content" select="data(context()/content)"/>

							<xforms:action if="context()/classified_as/_/id = 'http://vocab.getty.edu/aat/300404670'">
								<xforms:insert context="instance('object')" nodeset="./child::node()[last()]"
									origin="xforms:element('dcterms:title', (xforms:attribute('xml:lang', 'en'), $content))"/>
							</xforms:action>
							<xforms:action if="context()/classified_as/_/id = 'http://vocab.getty.edu/aat/300312355'">
								<xforms:insert context="instance('object')" nodeset="./child::node()[last()]"
									origin="xforms:element('dcterms:identifier', $content)"/>
							</xforms:action>
						</xforms:action>

						<!-- iterate through types in order to parse the shape -->
						<xforms:action xxforms:iterate="context()/classified_as/_[classified_as/_/id = 'http://vocab.getty.edu/aat/300067209']">
							<xforms:var name="uri" select="context()/id"/>

							<xforms:insert context="instance('object')" nodeset="./child::node()[last()]"
								origin="xforms:element('nmo:hasTypeSeriesItem', (xforms:attribute('rdf:resource', $uri)))"/>
						</xforms:action>

						<!-- insert and convert dimensions to metric -->
						<xforms:action xxforms:iterate="context()/dimension/_">

							<!-- ensure that the value is numeric -->
							<xforms:action if="context()/value castable as xs:decimal">
								<xforms:var name="type" select="data(context()/classified_as/_[1]/id)"/>
								<xforms:var name="value" select="number(context()/value)"/>
								<xforms:var name="units" select="data(context()/unit/id)"/>

								<!-- die axis -->
								<xforms:action if="$type = 'http://nomisma.org/id/axis' and $value castable as xs:integer">

									<!-- the die axis must be between 0 and 12 -->
									<xforms:action if="$value &gt;= 0 and $value &lt;= 12">
										<xforms:insert context="instance('object')" nodeset="./child::node()[last()]"
											origin="xforms:element('nmo:hasAxis', (xforms:attribute('rdf:datatype', 'http://www.w3.org/2001/XMLSchema#integer'), $value))"
										/>
									</xforms:action>

								</xforms:action>

								<!-- weight: grams are required -->
								<xforms:action if="$type = 'http://vocab.getty.edu/aat/300056240' and $units = 'http://vocab.getty.edu/aat/300379225'">
									<xforms:insert context="instance('object')" nodeset="./child::node()[last()]"
										origin="xforms:element('nmo:hasWeight', (xforms:attribute('rdf:datatype', 'http://www.w3.org/2001/XMLSchema#decimal'), $value))"
									/>
								</xforms:action>

								<!-- millimeter-based measurements-->
								<xforms:action
									if="$type = 'http://vocab.getty.edu/aat/300072633' or $type = 'http://vocab.getty.edu/aat/300055624' or $type = 'http://vocab.getty.edu/aat/300055644' or $type = 'http://vocab.getty.edu/aat/300055647'">

									<!-- use AAT URI to determine the correct Nomisma property -->
									<xforms:var name="element"
										select="if ($type = 'http://vocab.getty.edu/aat/300072633') then 'nmo:hasDepth' 
										else if ($type = 'http://vocab.getty.edu/aat/300055624') then 'nmo:hasDiameter' 
										else if ($type = 'http://vocab.getty.edu/aat/300055644') then 'nmo:hasHeight'
										else 'nmo:hasWidth'"/>

									<!-- convert from inches, cm, or leave the mm value. any other $units results in 'null' and the RDF property is not added -->
									<xforms:var name="normalizedValue"
										select="if ($units = 'http://vocab.getty.edu/aat/300379100') then format-number($value * 25.4, '###.##') 
										else if ($units = 'http://vocab.getty.edu/aat/300379098') then format-number($value * 10, '###.##')
										else if ($units = 'http://vocab.getty.edu/aat/300379097') then $value else 'null'"/>

									<xforms:insert context="instance('object')" nodeset="./child::node()[last()]"
										origin="xforms:element($element, (xforms:attribute('rdf:datatype', 'http://www.w3.org/2001/XMLSchema#decimal'), $normalizedValue))"
									if="$normalizedValue castable as xs:decimal"/>
								</xforms:action>

							</xforms:action>
						</xforms:action>

						<!-- boolean variable whether there's a link to a IIIF manifest. The manifest link is required for combined IIIF images (e.g., Harvard Art Museums) -->
						<xforms:var name="hasManifest" select="boolean(context()/subject_of/_[conforms_to/_/id = 'http://iiif.io/api/presentation'])"
							as="xs:boolean"/>

						<!-- digital images -->
						<xforms:action xxforms:iterate="context()//representation">
							<xforms:var name="side"
								select="if (context()/parent::node()/classified_as/_/id = 'http://vocab.getty.edu/aat/300190703') then 'obverse'
								else if (context()/parent::node()/classified_as/_/id = 'http://vocab.getty.edu/aat/300190692') then 'reverse' else 'combined'"/>

							<!-- formulate a different model for combined vs obverse/reverse images -->
							<xforms:action if="$side = 'obverse' or $side = 'reverse'">
								<xforms:var name="element" select="concat('nmo:has', upper-case(substring($side, 1, 1)), substring($side, 2))"/>

								<!-- process IIIF first -->
								<xforms:action if="context()/_[conforms_to = 'http://iiif.io/api/image']">
									<xforms:var name="service" select="context()/_[conforms_to = 'http://iiif.io/api/image']/id"/>

									<!-- create and insert relevant images into nmo:hasObverse and nmo:hasReverse -->
									<xforms:insert context="instance('object')" nodeset="./child::node()[last()]" origin="xforms:element($element)"/>
									<xforms:insert context="instance('object')/*[name()=$element]" origin="xforms:element('rdf:Description')"/>
									<xforms:insert context="instance('object')/*[name()=$element]/rdf:Description" nodeset="./child::node()[last()]"
										origin="xforms:element('foaf:thumbnail', (xforms:attribute('rdf:resource', concat($service, '/full/,120/0/default.jpg')), ''))"/>
									<xforms:insert context="instance('object')/*[name()=$element]/rdf:Description" nodeset="./child::node()[last()]"
										origin="xforms:element('foaf:depiction', (xforms:attribute('rdf:resource', concat($service, '/full/!400,400/0/default.jpg')), ''))"/>


									<!-- insert edm:WebResource and related service templates into instance('rdf') rather than instance('object') -->
									<xforms:insert context="instance('rdf')" nodeset="./child::node()[last()]" origin="instance('webresource-template')"/>
									<xforms:setvalue ref="instance('rdf')/edm:WebResource[last()]/@rdf:about"
										value="concat($service, '/full/!400,400/0/default.jpg')"/>
									<xforms:setvalue ref="instance('rdf')/edm:WebResource[last()]/svcs:has_service/@rdf:resource" value="$service"/>
									<xforms:setvalue ref="instance('rdf')/edm:WebResource[last()]/dcterms:isReferencedBy/@rdf:resource"
										value="concat($service, '/info.json')"/>

									<xforms:insert context="instance('rdf')" nodeset="./child::node()[last()]" origin="instance('service-template')"/>
									<xforms:setvalue ref="instance('rdf')/svcs:Service[last()]/@rdf:about" value="$service"/>
								</xforms:action>

								<xforms:action if="not(context()/_[conforms_to = 'http://iiif.io/api/image'])">

									<!-- only include the property if there's a jpeg image -->
									<xforms:action if="context()/_[format = 'image/jpeg']">
										<xforms:var name="image" select="context()/_[format = 'image/jpeg'][1]/id"/>

										<xforms:insert context="instance('object')" nodeset="./child::node()[last()]" origin="xforms:element($element)"/>
										<xforms:insert context="instance('object')/*[name()=$element]" origin="xforms:element('rdf:Description')"/>
										<xforms:insert context="instance('object')/*[name()=$element]/rdf:Description" nodeset="./child::node()[last()]"
											origin="xforms:element('foaf:depiction', (xforms:attribute('rdf:resource', $image), ''))"/>

									</xforms:action>
								</xforms:action>
							</xforms:action>

							<!-- TODO test later -->
							<xforms:action if="$side = 'combined'">
								<!-- process IIIF first -->
								<xforms:action if="context()/_[conforms_to = 'http://iiif.io/api/image'] and $hasManifest = true()">
									<xforms:var name="service" select="context()/_[conforms_to = 'http://iiif.io/api/image']/id"/>
									<xforms:var name="manifest"
										select="context()/parent::node()/subject_of/_[conforms_to/_/id = 'http://iiif.io/api/presentation']/id"/>

									<!-- insert web resources and service -->

								</xforms:action>
								<xforms:action if="not(context()/_[conforms_to = 'http://iiif.io/api/image'])">
									<xforms:action if="context()/_[format = 'image/jpeg']">
										<xforms:var name="image" select="context()/_[format = 'image/jpeg'][1]/id"/>

										<!-- insert foaf:depiction directly into the nmo:NumismaticObject -->
										<xforms:insert context="instance('object')" nodeset="./child::node()[last()]"
											origin="xforms:element('foaf:depiction', (xforms:attribute('rdf:resource', $image), ''))"/>
									</xforms:action>
								</xforms:action>
							</xforms:action>
						</xforms:action>

						<!-- insert collection link -->
						<xforms:action if="context()/current_owner">
							<xforms:var name="uri" select="data(context()/current_owner/id)"/>
							<xforms:var name="match"
								select="if (instance('mappings')/mapping[@from = $uri]/@to) then instance('mappings')/mapping[@from = $uri]/@to else $uri"/>

							<xforms:insert context="instance('object')" nodeset="./child::node()[last()]"
								origin="xforms:element('nmo:hasCollection', (xforms:attribute('rdf:resource', $match)))"/>
						</xforms:action>

						<!-- insert void:inDataset -->
						<xforms:insert context="instance('object')" nodeset="./child::node()[last()]"
							origin="xforms:element('void:inDataset', (xforms:attribute('rdf:resource', data(instance('void-rdf')/void:Dataset/@rdf:about))))"/>

						<!-- insert HMO template into primary RDF instance after processing -->
						<xforms:insert context="instance('rdf')" nodeset="child::node()[last()]" origin="instance('object')"/>

						<!-- clear template after completion -->
						<xforms:delete nodeset="instance('object')/*"/>
					</xforms:action>
				</xforms:action>
			</xforms:submission>

			<!-- ********** XFORMS-MODEL-CONSTRUCT-DONE ********** -->
			<xforms:action ev:event="xforms-model-construct-done">
				<!-- populate the page with a list of current collections ingested into Nomisma -->
				<!--<xforms:setvalue ref="instance('sparqlQuery')" value="instance('sparql-templates')/query[@id='get-datasets']"/>
				<xforms:send submission="submit-sparqlQuery"/>
				<xforms:delete nodeset="instance('datasets')/*"/>
				<xforms:insert context="instance('datasets')" origin="instance('sparqlResponse')/*"/>-->
			</xforms:action>
		</xforms:model>
	</head>

	<body>
		<xforms:var name="display_path">../</xforms:var>
		<div class="container-fluid">
			<div class="row">
				<div class="col-md-3 pull-right text-right">
					<h4>
						<a href="logout"><span class="glyphicon glyphicon-log-out"></span> logout</a>
					</h4>
				</div>
			</div>
			<div class="row">
				<div class="col-md-12">
					<p><a href="../"><span class="glyphicon glyphicon-arrow-left"></span>Return to Admin</a></p>
					<xforms:group ref=".[string-length(instance('control-instance')/status) &gt; 0]">
						<div class="alert-success alert alert-box">
							<span class="glyphicon glyphicon-info-sign"></span>
							<strong>Status:</strong>
							<xforms:output ref="instance('control-instance')/status"/>
						</div>
					</xforms:group>
					<h1>Manage Datasets</h1>
					<div>
						<xforms:trigger appearance="minimal">
							<xforms:label><span class="glyphicon glyphicon-plus"></span>Add dataset via RDF/XML VoID</xforms:label>
							<xforms:action ev:event="DOMActivate">
								<xforms:setvalue ref="instance('control-instance')/void_uri"/>
								<xxforms:show dialog="lookup-dialog"/>
							</xforms:action>
						</xforms:trigger>
						<xforms:trigger appearance="minimal">
							<xforms:label><span class="glyphicon glyphicon-plus"></span>Harvest Linked Art JSON-LD</xforms:label>
							<xforms:action ev:event="DOMActivate">
								<!-- submit SPARQL query to get a list of existing collections to use as dcterms:publisher -->
								<xforms:setvalue ref="instance('sparqlQuery')" value="instance('sparql-templates')/query[@id='get-collections']"/>
								<xforms:send submission="submit-sparqlQuery"/>

								<xforms:action ev:event="xforms-submit-done">
									<xforms:action xxforms:iterate="instance('sparqlResponse')//res:result">
										<xforms:var name="uri" select="data(context()/res:binding[@name='uri']/res:uri)"/>
										<xforms:var name="label" select="data(context()/res:binding[@name='label']/res:literal)"/>

										<xforms:insert context="instance('collections')" nodeset="./child::node()[last()]"
											origin="xforms:element('collection', (xforms:attribute('uri', $uri), $label))"/>
									</xforms:action>

									<!-- toggle interface -->
									<xforms:toggle case="harvest-json"/>
								</xforms:action>
							</xforms:action>
						</xforms:trigger>
					</div>

					<!--<xforms:group ref="instance('private-coordinates')">
						<xforms:repeat nodeset="record">
							<xforms:var name="uri" select="@uri"/>

							<div>
								<xforms:input ref="@uri">
									<xforms:label>Object URI</xforms:label>
								</xforms:input>
							</div>
							<div>
								<xforms:output ref="lat">
									<xforms:label>Lat</xforms:label>
								</xforms:output>
							</div>
							<div>
								<xforms:output ref="long">
									<xforms:label>Long</xforms:label>
								</xforms:output>
							</div>
						</xforms:repeat>

						<xforms:trigger>
							<xforms:label>Replace Findspot</xforms:label>
							<xforms:action ev:event="DOMActivate">
								<!-\- delete addIndex/doc -\->
								<xforms:delete nodeset="instance('addIndex')/doc"/>
								
								<xforms:action xxforms:iterate="record">
									<xforms:var name="uri" select="context()/@uri"/>

									<!-\- get the coordinates and name for the findspot currently associated with the object URI -\->
									<xforms:setvalue ref="instance('sparqlQuery')"
										value="concat(instance('sparql-templates')/prefix, ' ', replace(instance('sparql-templates')/query[@id='get-findspot'], 'URI', $uri))"/>
									<xforms:send submission="submit-sparqlQuery"/>

									<!-\- after this completes, generate the SPARQL/Update that deletes the old findspot and inserts the new ones, but only if the old findspot isn't a fragment identifier -\->
									<xforms:action ev:event="xforms-submit-done"
										if="not(contains(instance('sparqlResponse')//res:binding[@name='findspot']/res:uri, '#'))">
										<xforms:var name="findspot" select="instance('sparqlResponse')//res:binding[@name='findspot']/res:uri"/>
										<xforms:var name="lat" select="instance('sparqlResponse')//res:binding[@name='lat']/res:literal"/>
										<xforms:var name="long" select="instance('sparqlResponse')//res:binding[@name='long']/res:literal"/>
										<xforms:var name="name" select="instance('sparqlResponse')//res:binding[@name='name']/res:literal"/>

										<!-\- hash encode the new lat and long -\->
										<xforms:setvalue ref="instance('control-instance')/new_findspot_uri"
											value="concat($findspot, '#', digest(concat(normalize-space(context()/lat), ',', normalize-space(context()/long)), 'MD5', 'hex'))"/>
										<xforms:setvalue ref="instance('sparqlUpdate')"
											value="replace(replace(replace(replace(replace(replace(instance('sparqlUpdate-template')/query[@id='replace-findspot'], 'URI', $uri), 'OLDFINDSPOT', $findspot), 'LAT', $lat), 'LONG', $long), 'NAME', $name), 'NEWFINDSPOT', instance('control-instance')/new_findspot_uri)"/>
										<xforms:send submission="update-graph"/>

										<!-\- after Solr is automatically updated by the SPARQL/Update, then post updated coordinates directly into Solr -\->
										<xforms:insert context="instance('addIndex')" nodeset="./child::node()[last()]" origin="instance('doc-template')"/>
										<xforms:setvalue ref="instance('addIndex')/doc[last()]/field[@name='uri']"
											value="instance('control-instance')/new_findspot_uri"/>
										<xforms:setvalue ref="instance('addIndex')/doc[last()]/field[@name='geo']"
											value="concat(normalize-space(context()/long), ' ', normalize-space(context()/lat))"/>

									</xforms:action>
								</xforms:action>
								
								<!-\- post-solr-doc -\->
								<xforms:send submission="post-solr-doc"/>
							</xforms:action>
						</xforms:trigger>

						<xforms:trigger>
							<xforms:label>Revert Findspot</xforms:label>
							<xforms:action ev:event="DOMActivate" xxforms:iterate="record">
								<xforms:var name="uri" select="context()/@uri"/>

								<!-\- get the coordinates and name for the findspot currently associated with the object URI -\->
								<xforms:setvalue ref="instance('sparqlQuery')"
									value="concat(instance('sparql-templates')/prefix, ' ', replace(instance('sparql-templates')/query[@id='get-findspot'], 'URI', $uri))"/>
								<xforms:send submission="submit-sparqlQuery"/>

								<!-\- after this completes, generate the SPARQL/Update that replaces the fragment identifier with the original -\->
								<xforms:action ev:event="xforms-submit-done"
									if="contains(instance('sparqlResponse')//res:binding[@name='findspot']/res:uri, '#')">
									<xforms:var name="findspot" select="instance('sparqlResponse')//res:binding[@name='findspot']/res:uri"/>
									<xforms:var name="new-findspot" select="substring-before($findspot, '#')"/>

									<xforms:setvalue ref="instance('sparqlUpdate')"
										value="replace(replace(replace(instance('sparqlUpdate-template')/query[@id='revert-findspot'], 'URI', $uri), 'OLDFINDSPOT', $findspot), 'NEWFINDSPOT', $new-findspot)"/>
									<xforms:send submission="update-graph"/>
								</xforms:action>
							</xforms:action>
						</xforms:trigger>

						<xforms:trigger>
							<xforms:label>Insert Findspot</xforms:label>
							<xforms:action ev:event="DOMActivate">

								<!-\- the code below will insert a findspot into an object and the associated lat, long, and name with that OS URI -\->
								<xforms:var name="uri" select="instance('insert-test')/uri"/>
								<xforms:var name="findspot" select="instance('insert-test')/findspot"/>
								<xforms:var name="lat" select="instance('insert-test')/lat"/>
								<xforms:var name="long" select="instance('insert-test')/long"/>
								<xforms:var name="name" select="instance('insert-test')/name"/>

								<xforms:setvalue ref="instance('sparqlUpdate')"
									value="replace(replace(replace(replace(replace(instance('sparqlUpdate-template')/query[@id='insert-test-findspot'], 'URI', $uri), 'FINDSPOT', $findspot), 'LAT', $lat), 'LONG', $long), 'NAME', $name)"/>
								<xforms:send submission="update-graph"/>
							</xforms:action>
						</xforms:trigger>
					</xforms:group>-->

					<xforms:switch>
						<xforms:case id="default">
							<xforms:group ref="instance('datasets')">
								<xforms:group ref=".[count(void:Dataset) &gt; 0]">
									<table class="table">
										<thead>
											<tr>
												<th>Dataset</th>
												<th>Publisher</th>
												<th>Record Types</th>
												<th>Refresh</th>
												<th>Delete</th>
											</tr>
										</thead>
										<tbody>
											<xforms:repeat nodeset="descendant::void:Dataset">
												<tr>
													<td>
														<xforms:trigger appearance="minimal">
															<xforms:label value="dcterms:title"/>
															<xforms:action ev:event="DOMActivate">
																<xforms:load show="new" resource="{@rdf:about}"/>
															</xforms:action>
														</xforms:trigger>
													</td>
													<td><xforms:output ref="dcterms:publisher"/></td>
													<td>
														<xforms:repeat nodeset="dcterms:type">
															<xforms:trigger appearance="minimal">
																<xforms:label value="substring-after(@rdf:resource, '#')"/>
																<xforms:action ev:event="DOMActivate">
																	<xforms:load show="new" resource="{@rdf:resource}"/>
																</xforms:action>
															</xforms:trigger>
															<br />
														</xforms:repeat>
													</td>
													<td class="text-center">
														<xforms:trigger appearance="minimal">
															<xforms:label><span class="glyphicon glyphicon-refresh"></span></xforms:label>
															<xforms:action ev:event="DOMActivate">
																<xforms:var name="dataset" select="@rdf:about"/>
																<xforms:var name="type"
																	select="if (dcterms:type[@rdf:resource='http://nomisma.org/ontology#Hoard']) then 'Hoard' else if (dcterms:type[@rdf:resource='http://nomisma.org/ontology#TypeSeriesItem']) then 'TypeSeriesItem' else 'NumismaticObject'"/>
																<xforms:setvalue ref="instance('control-instance')/concept_type" select="$type"/>
																<xforms:setvalue ref="instance('control-instance')/dataset" value="$dataset"/>
																<xforms:dispatch target="refresh-dataset-dialog" name="fr-show"/>
															</xforms:action>
														</xforms:trigger>
													</td>
													<td class="text-center">
														<xforms:trigger appearance="minimal">
															<xforms:label><span class="glyphicon glyphicon-remove"></span></xforms:label>
															<xforms:action ev:event="DOMActivate">
																<xforms:var name="dataset" select="@rdf:about"/>
																<xforms:var name="type"
																	select="if (dcterms:type[@rdf:resource='http://nomisma.org/ontology#Hoard']) then 'Hoard' else if (dcterms:type[@rdf:resource='http://nomisma.org/ontology#TypeSeriesItem']) then 'TypeSeriesItem' else 'NumismaticObject'"/>
																<xforms:setvalue ref="instance('control-instance')/concept_type" value="$type"/>
																<xforms:setvalue ref="instance('control-instance')/dataset" value="$dataset"/>
																<xforms:dispatch target="delete-dataset-dialog" name="fr-show"/>
															</xforms:action>
														</xforms:trigger>
													</td>
												</tr>
											</xforms:repeat>
										</tbody>
									</table>
								</xforms:group>
								<xforms:group ref=".[count(descendant::res:result) = 0]">
									<p>No datasets found in endpoint. <xforms:trigger appearance="minimal">
											<xforms:label>Add a dataset.</xforms:label>
											<xforms:action ev:event="DOMActivate">
												<xforms:setvalue ref="instance('control-instance')/void_uri"/>
												<xxforms:show dialog="lookup-dialog"/>
											</xforms:action>
										</xforms:trigger></p>
								</xforms:group>
							</xforms:group>
						</xforms:case>
						<xforms:case id="harvest-json">
							<xforms:group ref="instance('void-rdf')/void:Dataset">

								<div class="alert-info alert alert-box">
									<p>
										<span class="glyphicon glyphicon-info-sign"></span>
										<strong>Notice:</strong> This is a beta interface and does not currently update the SPARQL endpoint.</p>
								</div>

								<xforms:group ref=".[not(count(dcterms:title/@xml:lang) = count(distinct-values(dcterms:title/@xml:lang)))]">
									<div class="alert-danger alert alert-box">
										<p>
											<span class="glyphicon glyphicon-exclamation-sign"></span>
											<strong>Alert:</strong> Title languages must be unique.</p>
									</div>
								</xforms:group>

								<xforms:group ref=".[not(count(dcterms:description/@xml:lang) = count(distinct-values(dcterms:description/@xml:lang)))]">
									<div class="alert-danger alert alert-box">
										<p>
											<span class="glyphicon glyphicon-exclamation-sign"></span>
											<strong>Alert:</strong> Description languages must be unique.</p>
									</div>
								</xforms:group>

								<h2>Dataset Metadata</h2>
								<div class="trigger_container">
									<xforms:trigger appearance="minimal">
										<xforms:label>
											<span class="glyphicon glyphicon-plus"></span> Title</xforms:label>
										<xforms:insert ev:event="DOMActivate" context="." nodeset="./child::node()[last()]"
											origin="xforms:element('dcterms:title', (xforms:attribute('xml:lang', '')))"/>
									</xforms:trigger>
									<xforms:trigger appearance="minimal">
										<xforms:label>
											<span class="glyphicon glyphicon-plus"></span> Description</xforms:label>
										<xforms:insert ev:event="DOMActivate" context="." nodeset="./child::node()[last()]"
											origin="xforms:element('dcterms:description', (xforms:attribute('xml:lang', '')))"/>
									</xforms:trigger>
									<xforms:group ref=".[count(dcterms:license) = 0]">
										<xforms:trigger appearance="minimal">
											<xforms:label>
												<span class="glyphicon glyphicon-plus"></span> License</xforms:label>
											<xforms:action ev:event="DOMActivate">
												<xforms:insert context="instance('control-instance')" nodeset="./child::node()[last()]"
													origin="xforms:element('license', '')"/>
												<xforms:insert context="." nodeset="./child::node()[last()]"
													origin="xforms:element('dcterms:license', (xforms:attribute('rdf:resource', '')))"/>
											</xforms:action>

										</xforms:trigger>
									</xforms:group>
									<xforms:group ref=".[count(dcterms:rights) = 0]">
										<xforms:trigger appearance="minimal">
											<xforms:label>
												<span class="glyphicon glyphicon-plus"></span> Rights</xforms:label>
											<xforms:action ev:event="DOMActivate">
												<xforms:insert context="instance('control-instance')" nodeset="./child::node()[last()]"
													origin="xforms:element('rights', '')"/>
												<xforms:insert context="." nodeset="./child::node()[last()]"
													origin="xforms:element('dcterms:rights', (xforms:attribute('rdf:resource', '')))"/>
											</xforms:action>
										</xforms:trigger>
									</xforms:group>
								</div>

								<div>
									<xforms:input ref="@rdf:about">
										<xforms:label>Dataset URI</xforms:label>
									</xforms:input>
								</div>
								<div>
									<xforms:input ref="void:dataDump/@rdf:resource">
										<xforms:label>JSON-LD URL</xforms:label>
									</xforms:input>
								</div>

								<xforms:repeat nodeset="dcterms:title">
									<div>
										<xforms:input ref=".">
											<xforms:label>Title</xforms:label>
											<xforms:alert>Required</xforms:alert>
										</xforms:input>
										<xforms:select1 ref="@xml:lang">
											<xforms:alert>Required</xforms:alert>
											<xforms:item>
												<xforms:label>Select...</xforms:label>
												<xforms:value/>
											</xforms:item>
											<xforms:itemset nodeset="instance('languages')/language">
												<xforms:label ref="."/>
												<xforms:value ref="@value"/>
											</xforms:itemset>
										</xforms:select1>
										<xforms:group ref=".[count(parent::node()/dcterms:title) &gt; 1]">
											<xforms:trigger appearance="minimal">
												<xforms:delete ev:event="DOMActivate" context="."/>
												<xforms:label>
													<span class="glyphicon glyphicon-remove"></span>
												</xforms:label>
											</xforms:trigger>
										</xforms:group>
									</div>
								</xforms:repeat>

								<xforms:repeat nodeset="dcterms:description">
									<div>
										<xforms:textarea ref=".">
											<xforms:label>Description</xforms:label>
											<xforms:alert>Required</xforms:alert>
										</xforms:textarea>
										<xforms:select1 ref="@xml:lang">
											<xforms:alert>Required</xforms:alert>
											<xforms:item>
												<xforms:label>Select...</xforms:label>
												<xforms:value/>
											</xforms:item>
											<xforms:itemset nodeset="instance('languages')/language">
												<xforms:label ref="."/>
												<xforms:value ref="@value"/>
											</xforms:itemset>
										</xforms:select1>
										<xforms:group ref=".[count(parent::node()/dcterms:description) &gt; 1]">
											<xforms:trigger appearance="minimal">
												<xforms:delete ev:event="DOMActivate" context="."/>
												<xforms:label>
													<span class="glyphicon glyphicon-remove"></span>
												</xforms:label>
											</xforms:trigger>
										</xforms:group>
									</div>
								</xforms:repeat>

								<div>
									<xforms:select1 ref="dcterms:publisher/@rdf:resource">
										<xforms:label>Publisher</xforms:label>
										<xforms:alert>Required</xforms:alert>
										<xforms:item>
											<xforms:label>Select...</xforms:label>
											<xforms:value/>
										</xforms:item>
										<xforms:itemset nodeset="instance('collections')/collection">
											<xforms:label ref="."/>
											<xforms:value ref="@uri"/>
										</xforms:itemset>
									</xforms:select1>
								</div>

								<xforms:group ref="instance('control-instance')">

									<xforms:group ref="license">
										<div>

											<xforms:select1 ref=".">
												<xforms:label>License</xforms:label>
												<xforms:alert>Required</xforms:alert>
												<xforms:item>
													<xforms:label>Select...</xforms:label>
													<xforms:value/>
												</xforms:item>
												<xforms:itemset nodeset="instance('licenses')/statement">
													<xforms:label ref="."/>
													<xforms:value ref="@value"/>
												</xforms:itemset>
												<xforms:item>
													<xforms:label>Other License (specify)</xforms:label>
													<xforms:value>other</xforms:value>
												</xforms:item>

												<xforms:action ev:event="xforms-value-changed">
													<xforms:var name="val" select="."/>

													<xforms:action if="starts-with($val, 'http')">
														<xforms:setvalue ref="instance('void-rdf')/void:Dataset/dcterms:license"/>
														<xforms:setvalue ref="instance('void-rdf')/void:Dataset/dcterms:license/@rdf:resource" value="$val"/>

														<xforms:delete nodeset="instance('control-instance')/license/@other"/>
													</xforms:action>
													<xforms:action if="$val = 'other'">
														<xforms:insert context="instance('control-instance')/license" origin="xforms:attribute('other', '')"/>
													</xforms:action>
													<xforms:action if="not(string($val))">
														<!-- blank values -->
														<xforms:setvalue ref="instance('void-rdf')/void:Dataset/dcterms:license"/>
														<xforms:setvalue ref="instance('void-rdf')/void:Dataset/dcterms:license/@rdf:resource"/>

														<xforms:delete nodeset="instance('control-instance')/license/@other"/>
													</xforms:action>
												</xforms:action>
											</xforms:select1>

											<xforms:group ref="@other">
												<div>
													<xforms:textarea ref=".">
														<xforms:label>Other License</xforms:label>
														<xforms:alert>Required</xforms:alert>

														<xforms:action ev:event="xforms-value-changed">
															<xforms:var name="val" select="."/>
															<!-- set the @rdf:resource if the value is a URL, otherwise set the literal -->
															<xforms:action if="matches($val, 'https?://(-\.)?([^\s/?\.#-]+\.?)+(/[^\s]*)?$')">
																<!-- insert @rdf:resource if it doesn't already exist -->
																<xforms:insert context="instance('void-rdf')/void:Dataset/dcterms:license"
																	origin="xforms:attribute('rdf:resource', '')"
																	if="not(instance('void-rdf')/void:Dataset/dcterms:license/@rdf:resource)"/>

																<xforms:setvalue ref="instance('void-rdf')/void:Dataset/dcterms:license/@rdf:resource"
																	value="$val"/>
																<xforms:setvalue ref="instance('void-rdf')/void:Dataset/dcterms:license"/>
															</xforms:action>
															<xforms:action if="not(matches($val, 'https?://(-\.)?([^\s/?\.#-]+\.?)+(/[^\s]*)?$'))">
																<xforms:delete nodeset="instance('void-rdf')/void:Dataset/dcterms:license/@rdf:resource"/>
																<xforms:setvalue ref="instance('void-rdf')/void:Dataset/dcterms:license" value="$val"/>
															</xforms:action>
														</xforms:action>
													</xforms:textarea>
												</div>
											</xforms:group>

											<!-- allow deletion of license if there's a rights -->
											<xforms:group ref=".[count(instance('void-rdf')/void:Dataset/dcterms:rights) &gt; 0]">
												<xforms:trigger appearance="minimal">
													<xforms:label>
														<span class="glyphicon glyphicon-remove"></span>
													</xforms:label>
													<xforms:action ev:event="DOMActivate">
														<xforms:delete nodeset="."/>
														<xforms:delete nodeset="instance('void-rdf')/void:Dataset/dcterms:license"/>
													</xforms:action>
												</xforms:trigger>
											</xforms:group>
										</div>
									</xforms:group>

									<xforms:group ref="rights">
										<div>

											<xforms:select1 ref=".">
												<xforms:label>Rights</xforms:label>
												<xforms:alert>Required</xforms:alert>
												<xforms:item>
													<xforms:label>Select...</xforms:label>
													<xforms:value/>
												</xforms:item>
												<xforms:itemset nodeset="instance('rights')/statement">
													<xforms:label ref="."/>
													<xforms:value ref="@value"/>
												</xforms:itemset>
												<xforms:item>
													<xforms:label>Other Rights (specify)</xforms:label>
													<xforms:value>other</xforms:value>
												</xforms:item>

												<xforms:action ev:event="xforms-value-changed">
													<xforms:var name="val" select="."/>

													<xforms:action if="starts-with($val, 'http')">
														<xforms:setvalue ref="instance('void-rdf')/void:Dataset/dcterms:rights"/>
														<xforms:setvalue ref="instance('void-rdf')/void:Dataset/dcterms:rights/@rdf:resource" value="$val"/>

														<xforms:delete nodeset="instance('control-instance')/rights/@other"/>
													</xforms:action>
													<xforms:action if="$val = 'other'">
														<xforms:insert context="instance('control-instance')/rights" origin="xforms:attribute('other', '')"/>
													</xforms:action>
													<xforms:action if="not(string($val))">
														<!-- blank values -->
														<xforms:setvalue ref="instance('void-rdf')/void:Dataset/dcterms:rights"/>
														<xforms:setvalue ref="instance('void-rdf')/void:Dataset/dcterms:rights/@rdf:resource"/>

														<xforms:delete nodeset="instance('control-instance')/rights/@other"/>
													</xforms:action>
												</xforms:action>
											</xforms:select1>

											<xforms:group ref="@other">
												<div>
													<xforms:textarea ref=".">
														<xforms:label>Other Rights</xforms:label>
														<xforms:alert>Required</xforms:alert>

														<xforms:action ev:event="xforms-value-changed">
															<xforms:var name="val" select="."/>
															<!-- set the @rdf:resource if the value is a URL, otherwise set the literal -->
															<xforms:action if="matches($val, 'https?://(-\.)?([^\s/?\.#-]+\.?)+(/[^\s]*)?$')">
																<!-- insert @rdf:resource if it doesn't already exist -->
																<xforms:insert context="instance('void-rdf')/void:Dataset/dcterms:rights"
																	origin="xforms:attribute('rdf:resource', '')"
																	if="not(instance('void-rdf')/void:Dataset/dcterms:rights/@rdf:resource)"/>

																<xforms:setvalue ref="instance('void-rdf')/void:Dataset/dcterms:rights/@rdf:resource"
																	value="$val"/>
																<xforms:setvalue ref="instance('void-rdf')/void:Dataset/dcterms:rights"/>
															</xforms:action>
															<xforms:action if="not(matches($val, 'https?://(-\.)?([^\s/?\.#-]+\.?)+(/[^\s]*)?$'))">
																<xforms:delete nodeset="instance('void-rdf')/void:Dataset/dcterms:rights/@rdf:resource"/>
																<xforms:setvalue ref="instance('void-rdf')/void:Dataset/dcterms:rights" value="$val"/>
															</xforms:action>
														</xforms:action>
													</xforms:textarea>
												</div>
											</xforms:group>

											<!-- allow deletion of rights if there's a license -->
											<xforms:group ref=".[count(instance('void-rdf')/void:Dataset/dcterms:license) &gt; 0]">
												<xforms:trigger appearance="minimal">
													<xforms:label>
														<span class="glyphicon glyphicon-remove"></span>
													</xforms:label>
													<xforms:action ev:event="DOMActivate">
														<xforms:delete nodeset="."/>
														<xforms:delete nodeset="instance('void-rdf')/void:Dataset/dcterms:rights"/>
													</xforms:action>
												</xforms:trigger>
											</xforms:group>
										</div>
									</xforms:group>

								</xforms:group>

								<!-- bind="import-json-trigger" -->
								<xforms:trigger>
									<xforms:label>Begin Harvest</xforms:label>
									<xforms:action ev:event="DOMActivate">
										<xforms:send submission="load-json"/>

										<!-- after the completion of the request, initiate SPARQL publication -->
										<!--<xforms:send submission="post-dump"/>
										<xforms:action ev:event="xforms-submit-done">
											<xforms:send submission="post-void"/>
										</xforms:action>-->

										<!-- refresh page after dumps have been posted -->
										<!--<xforms:setvalue ref="instance('sparqlQuery')" value="instance('sparql-templates')/query[@id='get-datasets']"/>
										<xforms:send submission="submit-sparqlQuery"/>
										<xforms:delete nodeset="instance('datasets')/*"/>
										<xforms:insert context="instance('datasets')" origin="instance('sparqlResponse')/*"/>
										<xforms:toggle case="default"/>-->
									</xforms:action>
								</xforms:trigger>
							</xforms:group>
							
							<fr:xforms-inspector/>
						</xforms:case>
						<xforms:case id="validate-void">
							<xforms:group ref="instance('void-rdf')">
								<xforms:group ref="void:Dataset[@rdf:about]">
									<!-- display error messages for missing fields -->
									<!--<xforms:group ref=".[not(string(dcterms:title))]">
										<div class="alert-danger alert alert-box">
											<span class="glyphicon glyphicon-exclamation-sign"></span>
											<strong>Alert:</strong> Title is required. </div>
									</xforms:group>-->
									<!--<xforms:group ref=".[not(string(dcterms:description)) and not(dcterms:description[@rdf:resource castable as xs:anyURI])]">
										<div class="alert-danger alert alert-box">
											<span class="glyphicon glyphicon-exclamation-sign"></span>
											<strong>Alert:</strong> Description is required. </div>
									</xforms:group>-->
									<xforms:group ref=".[not(string(dcterms:publisher)) and not(dcterms:publisher[@rdf:resource castable as xs:anyURI])]">
										<div class="alert-danger alert alert-box">
											<span class="glyphicon glyphicon-exclamation-sign"></span>
											<strong>Alert:</strong> Publisher is required. </div>
									</xforms:group>
									<xforms:group ref=".[not(string(dcterms:license)) and not(dcterms:license[@rdf:resource castable as xs:anyURI])]">
										<div class="alert-danger alert alert-box">
											<span class="glyphicon glyphicon-exclamation-sign"></span>
											<strong>Alert:</strong> Description is required. </div>
									</xforms:group>
									<div>
										<xforms:output ref="@rdf:about">
											<xforms:label>URI</xforms:label>
											<xforms:alert>Required</xforms:alert>
										</xforms:output>
									</div>
									<xforms:repeat nodeset="dcterms:title">
										<div>
											<xforms:output ref=".">
												<xforms:label>Title</xforms:label>
											</xforms:output>
											<xforms:group ref="@lang">
												<xforms:output value="concat('(', ., ')')"/>
											</xforms:group>
										</div>
									</xforms:repeat>
									<xforms:repeat nodeset="dcterms:description">
										<div>
											<xforms:output value="if (@rdf:resource) then @rdf:resource else .">
												<xforms:label>Description</xforms:label>
												<xforms:alert>test</xforms:alert>
											</xforms:output>
											<xforms:group ref="@lang">
												<xforms:output value="concat('(', ., ')')"/>
											</xforms:group>
										</div>
									</xforms:repeat>
									<xforms:group ref="dcterms:publisher">
										<div>
											<xforms:output value="if (@rdf:resource) then @rdf:resource else .">
												<xforms:label>Publisher</xforms:label>
											</xforms:output>
										</div>
									</xforms:group>
									<xforms:group ref="dcterms:license">
										<div>
											<xforms:output value="if (@rdf:resource) then @rdf:resource else .">
												<xforms:label>License</xforms:label>
											</xforms:output>
										</div>
									</xforms:group>
									<!-- the validate trigger is only enabled when the VoID RDF metadata conforms to basic requirements -->
									<xforms:trigger bind="validate-trigger">
										<xforms:label><span class="glyphicon glyphicon-check"></span>Validate</xforms:label>
										<xforms:action ev:event="DOMActivate">
											<xforms:message level="modal">test</xforms:message>
										</xforms:action>
									</xforms:trigger>
									<xforms:trigger>
										<xforms:label><span class="glyphicon glyphicon-upload"></span> Import</xforms:label>
										<xforms:action ev:event="DOMActivate">
											<!-- push VoID RDF into triplestore -->
											<xforms:send submission="post-void"/>
											<xforms:action ev:event="xforms-submit-done">
												<xforms:action xxforms:iterate="instance('void-rdf')/void:Dataset/void:dataDump">
													<xforms:setvalue ref="instance('control-instance')/dump_uri" value="context()/@rdf:resource"/>
													<xforms:send submission="load-dump"/>
													<xforms:action ev:event="xforms-submit-done">
														<xforms:send submission="post-dump"/>
													</xforms:action>
												</xforms:action>

												<!-- refresh page after dumps have been posted -->
												<xforms:setvalue ref="instance('sparqlQuery')" value="instance('sparql-templates')/query[@id='get-datasets']"/>
												<xforms:send submission="submit-sparqlQuery"/>
												<xforms:delete nodeset="instance('datasets')/*"/>
												<xforms:insert context="instance('datasets')" origin="instance('sparqlResponse')/*"/>
												<xforms:toggle case="default"/>
											</xforms:action>
										</xforms:action>
									</xforms:trigger>
								</xforms:group>
								<!-- if there is not a void:Dataset child and/or there is no URI for the Dataset, then validation fails outright -->
								<xforms:group ref=".[not(void:Dataset[@rdf:about])]">
									<div class="alert-danger alert alert-box"><span class="glyphicon glyphicon-exclamation-sign"></span>
										<strong>Alert:</strong> No void:Dataset object or missing dataset URI.</div>
									<xforms:trigger>
										<xforms:label><span class="glyphicon glyphicon-arrow-left"></span> Back</xforms:label>
										<xforms:toggle case="default" ev:event="DOMActivate"/>
									</xforms:trigger>
								</xforms:group>
							</xforms:group>
						</xforms:case>
					</xforms:switch>

					<!--<fr:xforms-inspector/>-->
				</div>
			</div>
		</div>
		<!-- *********** DIALOGS *********** -->
		<!-- this is the dialog for looking up a VoID RDF metadata object -->
		<xxforms:dialog id="lookup-dialog" appearance="full" level="modal" close="true" draggable="true" visible="false">
			<xforms:label>Load VoID RDF</xforms:label>
			<p>Insert the URI for VoID metadata RDF.</p>
			<div>
				<xforms:input ref="instance('control-instance')/void_uri"/>
				<xforms:trigger>
					<xforms:label>Load</xforms:label>
					<!-- delete current options in the instance and initiate new query -->
					<xforms:action ev:event="DOMActivate">
						<xforms:send submission="load-void"/>
						<xforms:action ev:event="xforms-submit-done">
							<xforms:toggle case="validate-void"/>
							<xforms:setvalue ref="instance('control-instance')/validate-trigger" value="true()" if="xxforms:valid(instance('void-rdf'), true())"
							/>
						</xforms:action>
						<xxforms:hide dialog="lookup-dialog"/>
					</xforms:action>
				</xforms:trigger>
			</div>
		</xxforms:dialog>
		<!-- dialog to confirm deletion of a void:Dataset and associated objects -->
		<fr:alert-dialog id="delete-dataset-dialog">
			<fr:label>Delete Dataset</fr:label>
			<fr:message>Are you sure you want to remove this dataset from the Nomisma.org SPARQL endpoint?</fr:message>
			<fr:positive-choice>
				<fr:label>Yes</fr:label>
				<xforms:action ev:event="DOMActivate">
					<!-- first delete the objects associated with the dataset, linked by void:inDataset -->
					<xforms:setvalue ref="instance('sparqlUpdate')"
						value="replace(instance('sparqlUpdate-template')/query[@id=concat('delete-', instance('control-instance')/concept_type)], 'DATASET', instance('control-instance')/dataset)"/>
					<xforms:send submission="update-graph"/>
					<!-- then delete the void:Dataset object -->
					<xforms:setvalue ref="instance('sparqlUpdate')"
						value="replace(instance('sparqlUpdate-template')/query[@id='delete-metadata'], 'DATASET', instance('control-instance')/dataset)"/>
					<xforms:send submission="update-graph"/>
					<!-- resubmit SPARQL query for void:Datasets to reset the table -->
					<xforms:setvalue ref="instance('sparqlQuery')" value="instance('sparql-templates')/query[@id='get-datasets']"/>
					<xforms:send submission="submit-sparqlQuery"/>
					<xforms:delete nodeset="instance('datasets')/*"/>
					<xforms:insert context="instance('datasets')" origin="instance('sparqlResponse')/*"/>
				</xforms:action>
			</fr:positive-choice>
			<fr:negative-choice>
				<fr:label>No</fr:label>
			</fr:negative-choice>
		</fr:alert-dialog>
		<fr:alert-dialog id="refresh-dataset-dialog">
			<fr:label>Refresh Dataset</fr:label>
			<fr:message>Refreshing the dataset may take several minutes. Continue?</fr:message>
			<fr:positive-choice>
				<fr:label>Yes</fr:label>
				<xforms:action ev:event="DOMActivate">
					<!-- first delete the objects associated with the dataset, linked by void:inDataset -->
					<xforms:setvalue ref="instance('sparqlUpdate')"
						value="replace(instance('sparqlUpdate-template')/query[@id=concat('delete-', instance('control-instance')/concept_type)], 'DATASET', instance('control-instance')/dataset)"/>
					<xforms:send submission="update-graph"/>
					<!-- then fetch the new data dump -->
					<xforms:action ev:event="xforms-submit-done">
						<xforms:action xxforms:iterate="instance('sparqlResponse')//void:Dataset[@rdf:about=instance('control-instance')/dataset]/void:dataDump">
							<xforms:setvalue ref="instance('control-instance')/dump_uri" value="context()/@rdf:resource"/>
							<xforms:send submission="load-dump"/>
							<xforms:send submission="post-dump" ev:event="xforms-submit-done"/>
						</xforms:action>
						<!-- resubmit SPARQL query for void:Datasets to reset the table -->
						<xforms:setvalue ref="instance('sparqlQuery')" value="instance('sparql-templates')/query[@id='get-datasets']"/>
						<xforms:send submission="submit-sparqlQuery"/>
						<xforms:delete nodeset="instance('datasets')/*"/>
						<xforms:insert context="instance('datasets')" origin="instance('sparqlResponse')/*"/>
					</xforms:action>
				</xforms:action>
			</fr:positive-choice>
			<fr:negative-choice>
				<fr:label>No</fr:label>
			</fr:negative-choice>
		</fr:alert-dialog>
	</body>
</html>
